/* THIS (.ts) FILE IS GENERATED BY TypedSignalR.Client.TypeScript */
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import type { IStreamResult, Subject } from '@microsoft/signalr';
import type { Item, BulletType } from '../liveorlive_server.Enums';
import type { ChatMessage, GameLogMessage, Player, Lobby } from '../liveorlive_server';

export type IChatRequest = {
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    getChatMessagesRequest(): Promise<void>;
    /**
    * @param content Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    sendChatMessage(content: string): Promise<void>;
    /**
    * @param messageId Transpiled from System.Guid
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    deleteChatMessage(messageId: string): Promise<void>;
    /**
    * @param messageId Transpiled from System.Guid
    * @param content Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    editChatMessage(messageId: string, content: string): Promise<void>;
}

export type IGameLogRequest = {
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    getGameLogRequest(): Promise<void>;
}

export type IConnectionRequest = {
    /**
    * @param username Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    setHost(username: string): Promise<void>;
    /**
    * @param username Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    kickPlayer(username: string): Promise<void>;
}

export type IBaseGameRequest = {
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    startGame(): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    getLobbyDataRequest(): Promise<void>;
    /**
    * @param target Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    shootPlayer(target: string): Promise<void>;
}

export type IGenericRequest = {
}

export type IItemRequest = {
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    useReverseTurnOrderItem(): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    useRackChamberItem(): Promise<void>;
    /**
    * @param target Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    useExtraLifeItem(target: string): Promise<void>;
    /**
    * @param target Transpiled from string
    * @param item Transpiled from liveorlive_server.Enums.Item
    * @param itemTarget Transpiled from string?
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    usePickpocketItem(target: string, item: Item, itemTarget: string): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    useAdrenalineItem(): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    useInvertItem(): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    useChamberCheckItem(): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    useDoubleDamageItem(): Promise<void>;
    /**
    * @param target Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    useSkipItem(target: string): Promise<void>;
}

export type IHubServerResponse = {
    /**
    * @param messages Transpiled from System.Collections.Generic.List<liveorlive_server.ChatMessage>
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    getChatMessagesResponse(messages: ChatMessage[]): Promise<void>;
    /**
    * @param message Transpiled from liveorlive_server.ChatMessage
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    chatMessageSent(message: ChatMessage): Promise<void>;
    /**
    * @param messageId Transpiled from System.Guid
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    chatMessageDeleted(messageId: string): Promise<void>;
    /**
    * @param messageId Transpiled from System.Guid
    * @param content Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    chatMessageEdited(messageId: string, content: string): Promise<void>;
    /**
    * @param messages Transpiled from liveorlive_server.GameLogMessage[]
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    getGameLogResponse(messages: GameLogMessage[]): Promise<void>;
    /**
    * @param message Transpiled from liveorlive_server.GameLogMessage
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    gameLogUpdate(message: GameLogMessage): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    connectionSuccess(): Promise<void>;
    /**
    * @param reason Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    connectionFailed(reason: string): Promise<void>;
    /**
    * @param player Transpiled from liveorlive_server.Player
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    playerJoined(player: Player): Promise<void>;
    /**
    * @param username Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    playerLeft(username: string): Promise<void>;
    /**
    * @param previous Transpiled from string?
    * @param current Transpiled from string?
    * @param reason Transpiled from string?
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    hostChanged(previous: string, current: string, reason: string): Promise<void>;
    /**
    * @param username Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    playerKicked(username: string): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    gameStarted(): Promise<void>;
    /**
    * @param blankRoundCount Transpiled from int
    * @param liveRoundCount Transpiled from int
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    newRoundStarted(blankRoundCount: number, liveRoundCount: number): Promise<void>;
    /**
    * @param username Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    turnStarted(username: string): Promise<void>;
    /**
    * @param username Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    turnEnded(username: string): Promise<void>;
    /**
    * @param lobbyData Transpiled from liveorlive_server.Lobby
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    getLobbyDataResponse(lobbyData: Lobby): Promise<void>;
    /**
    * @param target Transpiled from string
    * @param bulletType Transpiled from liveorlive_server.Enums.BulletType
    * @param damage Transpiled from int
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    playerShotAt(target: string, bulletType: BulletType, damage: number): Promise<void>;
    /**
    * @param message Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    showAlert(message: string): Promise<void>;
    /**
    * @param username Transpiled from string
    * @param achievement Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    achievementUnlocked(username: string, achievement: string): Promise<void>;
    /**
    * @param reason Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    actionFailed(reason: string): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    reverseTurnOrderItemUsed(): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    rackChamberItemUsed(): Promise<void>;
    /**
    * @param target Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    extraLifeItemUsed(target: string): Promise<void>;
    /**
    * @param target Transpiled from string
    * @param item Transpiled from liveorlive_server.Enums.Item
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    pickpocketItemUsed(target: string, item: Item): Promise<void>;
    /**
    * @param lifeChange Transpiled from int
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    adrenalineItemUsed(lifeChange: number): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    invertItemUsed(): Promise<void>;
    /**
    * @param bulletType Transpiled from liveorlive_server.Enums.BulletType
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    chamberCheckItemUsed(bulletType: BulletType): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    doubleDamageItemUsed(): Promise<void>;
    /**
    * @param target Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    skipItemUsed(target: string): Promise<void>;
}

export type IChatResponse = {
    /**
    * @param messages Transpiled from System.Collections.Generic.List<liveorlive_server.ChatMessage>
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    getChatMessagesResponse(messages: ChatMessage[]): Promise<void>;
    /**
    * @param message Transpiled from liveorlive_server.ChatMessage
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    chatMessageSent(message: ChatMessage): Promise<void>;
    /**
    * @param messageId Transpiled from System.Guid
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    chatMessageDeleted(messageId: string): Promise<void>;
    /**
    * @param messageId Transpiled from System.Guid
    * @param content Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    chatMessageEdited(messageId: string, content: string): Promise<void>;
}

export type IGameLogResponse = {
    /**
    * @param messages Transpiled from liveorlive_server.GameLogMessage[]
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    getGameLogResponse(messages: GameLogMessage[]): Promise<void>;
    /**
    * @param message Transpiled from liveorlive_server.GameLogMessage
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    gameLogUpdate(message: GameLogMessage): Promise<void>;
}

export type IConnectionResponse = {
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    connectionSuccess(): Promise<void>;
    /**
    * @param reason Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    connectionFailed(reason: string): Promise<void>;
    /**
    * @param player Transpiled from liveorlive_server.Player
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    playerJoined(player: Player): Promise<void>;
    /**
    * @param username Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    playerLeft(username: string): Promise<void>;
    /**
    * @param previous Transpiled from string?
    * @param current Transpiled from string?
    * @param reason Transpiled from string?
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    hostChanged(previous: string, current: string, reason: string): Promise<void>;
    /**
    * @param username Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    playerKicked(username: string): Promise<void>;
}

export type IBaseGameResponse = {
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    gameStarted(): Promise<void>;
    /**
    * @param blankRoundCount Transpiled from int
    * @param liveRoundCount Transpiled from int
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    newRoundStarted(blankRoundCount: number, liveRoundCount: number): Promise<void>;
    /**
    * @param username Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    turnStarted(username: string): Promise<void>;
    /**
    * @param username Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    turnEnded(username: string): Promise<void>;
    /**
    * @param lobbyData Transpiled from liveorlive_server.Lobby
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    getLobbyDataResponse(lobbyData: Lobby): Promise<void>;
    /**
    * @param target Transpiled from string
    * @param bulletType Transpiled from liveorlive_server.Enums.BulletType
    * @param damage Transpiled from int
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    playerShotAt(target: string, bulletType: BulletType, damage: number): Promise<void>;
}

export type IGenericResponse = {
    /**
    * @param message Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    showAlert(message: string): Promise<void>;
    /**
    * @param username Transpiled from string
    * @param achievement Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    achievementUnlocked(username: string, achievement: string): Promise<void>;
    /**
    * @param reason Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    actionFailed(reason: string): Promise<void>;
}

export type IItemResponse = {
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    reverseTurnOrderItemUsed(): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    rackChamberItemUsed(): Promise<void>;
    /**
    * @param target Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    extraLifeItemUsed(target: string): Promise<void>;
    /**
    * @param target Transpiled from string
    * @param item Transpiled from liveorlive_server.Enums.Item
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    pickpocketItemUsed(target: string, item: Item): Promise<void>;
    /**
    * @param lifeChange Transpiled from int
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    adrenalineItemUsed(lifeChange: number): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    invertItemUsed(): Promise<void>;
    /**
    * @param bulletType Transpiled from liveorlive_server.Enums.BulletType
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    chamberCheckItemUsed(bulletType: BulletType): Promise<void>;
    /**
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    doubleDamageItemUsed(): Promise<void>;
    /**
    * @param target Transpiled from string
    * @returns Transpiled from System.Threading.Tasks.Task
    */
    skipItemUsed(target: string): Promise<void>;
}

